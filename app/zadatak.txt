-napraviti novi laravel projekat sa imenom ‘blog’
-kreirati bazu podataka ‘blog’
-povezati aplikaciju sa bazom podataka preko .env fajla
-izgenerisati migraciju za posts tabelu (id, title, body, timestamps)
-‘Ubaciti’ nekoliko test post-ova
-Izgenerisati model Post - artisan make:model
-Napraviti 2 stranice - all posts i single post po ugledu na prethodne dane
-Svu interakciju sa bazom uraditi preko modela (all(), find($id))
-Obrisati migraciju za posts tabelu i Post model
-Napraviti model i migraciju uz pomoc jedne komande: artisan make:model Post -m
-U migraciji dodati (pored gore pomenutih polja) ‘published’ polje tipa boolean
-Pokrenuti migracije
-‘Ubaciti’ nekoliko test post-ova
-Na modelu Post napraviti metod koji ce vracati published i drugi metod koji ce vracati unpublished post-ove - return self::where(‘published’, 1)->get()
-Izgenerisati PostsController - artisan make:controller PostsController
-Izmeniti rute da idu preko kontrolera
  -Svi postovi - ‘PostsController@index’
  -Single post - ‘PostsController@show’
-Dodati odgovarajuce metode u kontroler - inde) i show()
- Prebaciti logiku iz ruta koje smo dosad koristili u odgovarajuce metode kontrolera


- Napraviti novi folder unutar ‘views’ foldera sa imenom ‘layouts’
- U novokreiranom folderu napraviti novi blade fajl - master.blade.php
- Sadrzaj tog fajla - najbazicniji html sa ,  i <body> tag-ovima
- U okviru <body> tagova, dodati @yield(‘content’) blade-ovu direktivu
- Izmeniti posts.index i posts.show view-ove da ‘extenduju’ master view:
    @extends(‘layouts.master’)
    @section(‘content’)
    U okviru section-a umetnuti nas html koji ispisuje postove/jedan post

- Posetiti twitter bootstrap (verzija 4) sajt (https://v4-alpha.getbootstrap.com/)
- Examples sekcija - blog example
- View-source -> iskopirati citav sadrzaj i ubaciti u nas master.blade.php fajl umesto postojeceg html-a
- Pri dnu koda obrisati sekciju ‘Bootstrap core JavaScript’, sve do tag-a
- Naci u bootstrap-ovoj dokumentaciji https://v4-alpha.getbootstrap.com/getting-started/introduction/#quick-start
link do CDN-a koji host-uje osnovni (core) bootstrap css.
- Iskopirati taj link i umetnuti ga u nas novi master.blade.php ispod komentara


- Create post form- Registrovati  novu rutu (/posts/create) i stranicu za form-u-
- Na Twitter bootsrap sajtu naci primer html form-e (sekcija ‘css’)- Iskopirati i ubaciti u nas novi view posts.create-
- Izmeniti form-u da ima samo 2 polja koja nam trebaju - title i body-
- Za form method postaviti ‘POST’ a za action ‘/posts’-
- Registrovati novu rutu (Route::post) koja ce biti odgovorna za procesuiranje form-e-
- Dodati odgovarajuci metod u kontroler-
- Probajte da resite csrf exception uz pomoc dokumentacije
- $post = New Post;  $post->title = request(‘title’); $post->save();- Dodati redirekciju na kraju metoda - return redirect(‘/posts’)
- Validation- U kontroler, pre kreiranja post-a, dodati validaciju
$this->validate(request(),
- [‘title’ => ‘required’]) - za sva polja odraditi-
- Na view-u koji drzi form-u dodati html za prikaz greski
foreach($errors->all() as $error)    {{ $error }}-
- Izdvojiti greske u partial view

Comments
- Napraviti model i migraciju za komentare
- Dodati ‘rucno’ par komentara
- pokrrenuti php artisan tinker i proveriti da li su komentari kreirani
- Napraviti relacije izmedju modela Post i Comment
- Post - return $this->hasMany(Comment::class);
- Comment - return $this->belongsTo(Post::class);
- Na single post stranici ispisati komentare vezane za taj post   $post->comments as $comment
- Ispod komentara dodati form-u na kojoj korisnik moze da ostavi komentar
- Textarea + submit dugme (kod o ugledu na form-u za kreiranje post-a)
- Obavezno izgenerisati novi CommentsController koji ce biti zaduzen za procesuiranje form-e
- Prvo napraviti da se komentar kreira uz pomoc Comment modela ,
  a kasnije izmestiti u Post model i iskoristiti relaciju za kreiranje komentara
- Nakon uspesnog kreiranja redirektovati korisnika na istu stranu
- Napraviti i validaciju za comments form-u sa greskama

VEZBA 1 - REGISTRACIJA

- Otvoriti migraciju za kreiranje korisnika (već napravljena).
- Proći zajedno sa kandidatima ispitujući ih, da obnove gradivo vezano za ovaj deo
- Dodati `get` rutu-`php artisan make:controller RegisterController`
- Dodati `create` akciju-Kreirati view fajl. Ok je kopirati posts/create fajl radi bržeg rada i
  izmeniti potrebno (ako je predavaču tako lakše)
- Proveriti da li radi dodata ruta i da li se otvara forma za registraciju
- Dodati `store` akciju--Validacija--Kreiranje korisnika--Ulogovati korisnika--Redirekcija
- Dodati rutu za store
- Proći nekoliko pogrešnih unosa da se dobije error poruka.
- Napomenuti u kojem delu se ispisuje greska u view fajlu
- Uraditi uspešnu registraciju
- Proveriti da li je korisnik dodat u bazi podataka
- Proći pojedinačno sa kandidatima da li svi razumeju urađeno i komitovati

VEZBA 2 - ENKRIPTOVANJE LOZINKE

-Otvoriti bazu podataka i objasniti zašto je loše da na taj način čuvamo podatke
-Obrisati korisnike iz baze i otvoriti registracionu formu
-Dodati enkriptovanje
-Pokazati bazu podataka i kako sad izgleda sačuvana lozinka
-Proći pojedinačno sa kandidatima da li svi razumeju urađeno i komitovati


VEZBA 3 - LOGOUT

-Objasniti zašto je korisnik u ovom trenutku ulogovan
-`php artisan make:controller LoginController`
-Dodati rutu za logout
-Dodati akciju u kontroleru za logout
-Dodati name u hederu
-Dodati link u hederu za logout
-Izvrsiti logout. Dobija se error
-Dodati uslov na name i logout link da se samo ulogovanim korisnicima to prikazuje
-Proći pojedinačno sa kandidatima da li svi razumeju urađeno i komitovati


VEZBA 4 - LOGIN

-Dodati rute za login (get i post)
-Dodati akciju create
-Kreirati view fajl. Ok je kopirati register/create fajl radi bržeg rada i izmeniti potrebno (ako je predavaču tako lakše)
-Proveriti da li radi dodata ruta i da li se otvara forma za login
-Dodati akciju store i implementirati login u njoj. Objasniti detaljno sta se desava, sta radi sve attempt funkcija itd.
-Uraditi pogresan login i izazvati gresku. Napomenuti u kojem delu se ispisuje greska u view fajlu
-Uraditi dobar login
-Dodati login link u hederu
-Ponoviti logout/login
-Proći pojedinačno sa kandidatima da li svi razumeju urađeno i komitovati

Procitaj middleware iz dokumnetacije

VEZBA 5 - MIDDLEWARES

-Pokusati pristupiti login i register stranici kao ulogovan korisnik
-Objasniti da to nije zeljeno ponasanje i da to zelimo da sprecimo u aplikaciji.
 Zato koristimo middlewares
-Objasniti sta su middlewares, cemu sluze i gde se koriste
-Proci kroz listu u Kernel.php. Prikazati sadrzaj Middlewares foldera.
-Primeniti middlewares u konstruktoru login kontrolera
-Isprobati login i logout za ulogovane/neulogovane korisnike
-Primeniti middlewares u konstruktoru register kontrolera
-Pojavice se redirekcija na ‘home’ stranicu.
 Izmeniti `RedirectIfAuthenticated` klasu (koju koristi `guest` middleware) da
 redirektuje na `posts` stranicu
-Isprobati register za ulogovane/neulogovane korisnike
-Objasniti da je moguce primeniti middlewares i direktno na rute.
 Demonstrirati i taj slucaj u jednom primeru ali komitovati sa middlewares u konstruktorima
-Proći pojedinačno sa kandidatima da li svi razumeju urađeno i komitovati


VEZBA 6 - POVEZIVANJE KORISNIKA I POSTOVA

-Imamo situaciju da postovi nisu povezani sa korisnicima, tj. da nije postavljen autor posta.
 Autor posta treba da bude onaj koji je kreirao post
-Dodavanje migracije `php artisan make:migration add_author_to_posts_table --table=posts`
-Objasniti dodavanje kolone i foreign key u postojecu tabelu
-Na user_id kolonu se postavlja nullable, jer u suprotnom migracija nece proci
 ako ima postova u tabeli posts (sa ovim dozvoljavamo da postovi nemaju autora). Objasniti ovo
-Probati i rollback migracije. Objasniti kako funkcionise
-Dodati postavljanje user_id u PostsController::store akciju
-Postaviti middlewares u konstruktor PostsController-a.
 Zabraniti da guest pristupa create i store akcijama
-Pokusati pristupiti create akciji kao neulogovan korisnik.
 Aplikacija ce baciti gresku da ne postoji ruta sa imenom ‘login’
-Na login rutu definisati ime rute. Pokusati opet, aplikacija ce uraditi adekvatnu redirekciju
-Dodati vezu ka Users modelu u Post model
-U posts/show i posts/index view fajlovima izmeniti da se umesto ‘Mark’ prikazuje ime korisnika.
 Ako postoje postovi koji nemaju korisnika, aplikacija ce puci
-Postaviti rucno korisnika na svaki post ako je potrebno da bi se nastavilo sa radom
-Proći pojedinačno sa kandidatima da li svi razumeju urađeno i komitovati



Vežba 7 - Prikaz korisnickih postova

-Zadatak ove vezbe je dodati link ka autoru i prikazati njegove postove na toj stranici
-`php artisan make:controller UsersController`
-Dodati get rutu '/users/{id}'
-Postaviti linkove ka users stranici na posts/index i posts/show stranicama
-Implementirati show akciju u UsersController
-Dodati view fajl users/show.blade.php (ako je lakse, kopirati posts/index i doraditi)
-Pokusati pristupiti stranici korisnika, aplikacija puca jer nije postavljena relacija
 ka postovima u User modelu
-Dodati relaciju ka postovima u User modelu
-Pokrenuti aplikaciju i pristupiti users stranici
-Proći pojedinačno sa kandidatima da li svi razumeju urađeno i komitovatiq



Vežba 8 - Konfigurisanje email-ova

-Objasniti šta je SMTP server i za šta se koristi
-Koristiti mailtrap za hvatanje mail-ova
-Svi kandidati neka se registruju na mailtrap.io
-Na settings stranici nekog inboxa (na mailtrap.io) se mogu naći podaci (username/password)
 za autentifikaciju koji treba da se postave u .env fajl
-Otvoriti config/mail.php fajl, objasniti čemu služi ovaj fajl
-Objasniti i da se kroz poziv funkcije env (npr. “env('MAIL_DRIVER', 'smtp')”) dobavljaju
 vrednosti iz .env fajla
-Objasniti i ‘from’ konfiguraciju
-U sledecoj vezbi ce se raditi slanje email-ova
-Proći pojedinačno sa kandidatima da li svi razumeju urađeno
-https://kinsta.com/knowledgebase/free-smtp-server/ Podeliti koristan članak kako da
 postave besplatno slanje sa gmail account



Vežba 9 - Slanje email-ova

-Zadatak ove vezbe ce biti slanje mail-a autoru posta kada se doda komentar na post
-Kreirati mail klasu `php artisan make:mail CommentReceived`
-Kreirati emails/comment-received.blade.php view fajl
-Otvoriti klasu CommentReceived i izmeniti da koristi comment-received view fajl
-U Comments kontroleru dodati slanje CommentReceived emaila autoru.
 Pri instanciranju mail-a proslediti post kao parametar
-Doraditi CommentReceived da prima post kao parametar i postaviti ga u post atribut
-Objasniti da su svi public atributi mail klase automatski dostupni u mail view fajlu
-Postaviti sadrzaj mail-a
-Postaviti komentar i pogledati na mailtrap-u da li je pristigao mail
-Izmeniti “from” u email konfiguracijama
-Ponovo postaviti komentar i pogledati mail
-Proći pojedinačno sa kandidatima da li svi razumeju urađeno i komitovati

Vezba 9,5 - -||-

- Samo ulogovanim korisnicima prikazi formu za unos komentara
- Na svako kreiranje posta posalji mail administratoru, i u mailu kreator posta i naslov posta

Vežba 10 - Provera starosti pomocu middleware-a

-Zadatak ove vezbe je provera starosti korisnika pri registraciji pomocu middleware-a
-Kreirati middleware klasu `php artisan make:middleware CheckAge`
-Kreirati register/forbidden-under-18.blade.php view fajl
-Postaviti sadrzaj register/forbidden-under-18.blade.php fajla
-Prosiriti register/create.blade.php sa novim poljem za unos godina
-Otvoriti klasu ChechAge u app/Http/Middlewares i izvrsiti proveru da li polje `age`
 iz requesta ima vrednost manju od 18.
 Ako ima, vratiti view register/forbidden-under-18.blade.php; ako ne, propustiti request dalje.
-Registrovati middleware CheckAge u Kernel.php
-Dodati middleware na RegisterController na store() metodu
-Proći pojedinačno sa kandidatima da li svi razumeju urađeno i komitovati

Vežba 11 - Koriscenje session-a

-https://laravel.com/docs/5.4/session#introduction
-U ovoj vezbi je koriscena flash message preko session-a nakon registracije
-Objasniti sta su sessions i koja je njihova uloga
-Objasniti koriscenje helpera sessions()
-Objasniti sta su flash messages preko session-a
-Dodati flash message poruku nakon registracije (pre redirekcije na /post stranu)
-Izmeniti master.blade.php za prikaz flash message-a
-Proći pojedinačno sa kandidatima da li svi razumeju urađeno i komitovati

Vežba 12 - Postovi i tagovi

-U ovoj vezbi se postovi filtriraju po odredjenom tagu i svaki post prikazuje koje tagove sadrzi
-Kreirati novi model Tag zajedno sa migracijom: `php artisan make:model Tag -m`
-Izmeniti migraciju za tags tabelu i post_tag tabelu
-Izvrsiti migraciju: `php artisan migrate`
-Kreirati rutu za prikaz postova sa odredjenim tagom
-Kreirati kontroler za tagove: `php artisan make:controller TagsController`
-Izmena Tag modela, kreiranje relacije prema postovima i setovanje route key name-a
-Izmena Post modela, dodavanje relacije prema tagovima
-Izmeniti `posts/show.blade.php` view fajl za prikaz tagova datog posta
-Proći pojedinačno sa kandidatima da li svi razumeju urađeno i komitovati


Vežba 13a - Seeders

-Zadatak ove vezbe je cuvanje velike kolicine test podataka u bazu
-https://laravel.com/docs/5.4/seeding
-Objasniti sta su seeders i njihovu primenu
-Kreirati UsersTableSeeder: `php artisan make:seeder UsersTableSeeder`
-Iskoristiti factory za users i kreirati u UsersTableSeeder 20 korisnika
-Pokrenuti UsersTableSeeder: `-`
-Kreirati PostsTableSeeder: `php artisan make:seeder PostsTableSeeder`
-Kreirati factory za Posts po uzoru na factory za Users
-Iskoristiti postojeci PostFactory i kreirati u PostsTableSeeder za svakog korisnika po 5 postova
-Pokrenuti PostsTableSeeder: `php artisan db:seed --class=PostsTableSeeder`
-Kreirati CommentsTableSeeder: `php artisan make:seeder CommentsTableSeeder`
-Kreirati factory za Comments
-Kreirati u CommentsTableSeeder za svaki post po 6 komentara
-Pokrenuti CommentsTableSeeder: `php artisan db:seed --class=CommentsTableSeeder`
-Kreirati TagsTableSeeder: `php artisan make:seeder TagsTableSeeder`
-U TagsTableSeeder kreirati 5 tagova: Blogging, Freelancing, How to Succeed, Internet Marketing, Miscellaneous,
-Nakon toga, u TagsTableSeeder povezati postove za razlicitim tagovima
-Pokrenuti TagsTableSeeder: `php artisan db:seed --class=TagsTableSeeder`
-Izmeniti klasu DatabaseSeeder za pokretanje vise seeder-a
-Za rollback i re-run svih migraciju uz pokretanje seeder-a izvrsiti: `php artisan migrate:refresh --seed`
-Proći pojedinačno sa kandidatima da li svi razumeju urađeno i komitovati


Vežba 13b - Pagination

-Zadatak ove vezbe je upotreba paginacije pri prikazivanju postova
-Sta je paginacija: prikaz velikog broja unosa iz baze na vise stranica
-https://laravel.com/docs/5.4/pagination
-Prikaz rezultata paginacije
-Izmeniti index() akciju u PostsController-u da izvrsava paginaciju za svakih 10 postova
-Izmeniti posts/index.blade.php tako da se na dugmice ‘Previous’ i ‘Next’ prelazi na prethodnu ili sledecu stranu sa postovima. Prikazati koja je trenutna strana od ukupnog broja strana.
-Objasniti metode paginator instance
-Proći pojedinačno sa kandidatima da li svi razumeju urađeno i komitovati